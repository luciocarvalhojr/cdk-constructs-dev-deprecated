import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import { VpcBase } from '../../../src'
import * as rds from 'aws-cdk-lib/aws-rds';

// import * as sqs from 'aws-cdk-lib/aws-sqs';

export class CdkRdsglobalStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    /*
    new RdsGlobal(this, 'RdsGlobal', {
      engine: 'aurora',
      engineVersion: '8.0.mysql_aurora.3.5.2',
      globalClusterIdentifier: 'my-global-cluster',
      // ARN of the source DB cluster
      sourceDbClusterIdentifier: 'arn:aws:rds:ca-central-1:177078417298:cluster:database-1',
      storageEncrypted: true,
    });
    */

    const vpc = new ec2.Vpc(this, 'VPC', {
      maxAzs: 2,
      subnetConfiguration: [
        {
          cidrMask: 24,
          name: 'isolated',
          subnetType: ec2.SubnetType.PRIVATE_ISOLATED,
        },
      ],
    });

    const cluster = new rds.DatabaseCluster(this, 'Database', {
      engine: rds.DatabaseClusterEngine.auroraMysql({ version: rds.AuroraMysqlEngineVersion.VER_3_05_2 }),
      writer: rds.ClusterInstance.serverlessV2('writer'),
      serverlessV2MinCapacity: 8,
      serverlessV2MaxCapacity: 8,
      readers: [
        rds.ClusterInstance.serverlessV2('reader',{ scaleWithWriter: true }),
      ],
      vpc,
      vpcSubnets: {
        subnetType: ec2.SubnetType.PRIVATE_ISOLATED,
      },  
    });

    new rds.CfnGlobalCluster(this, 'MyCfnGlobalCluster',{
      deletionProtection: false,
      globalClusterIdentifier: 'globalClusterIdentifier',
      sourceDbClusterIdentifier: 'arn:aws:rds:ca-central-1:851725632314:cluster:cdkrdsglobalstack-databaseb269d8bb-e6pegwp6tjaf',
    });

  }
}
